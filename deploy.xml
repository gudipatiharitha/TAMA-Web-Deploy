<?xml version="1.0" encoding="UTF-8"?>
<project name="tama" basedir=".">

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <typedef resource="org/motechproject/build/deployMacroDefs.xml">
        <classpath>
            <pathelement location="lib/motech-delivery-ops-0.3-SNAPSHOT.jar"/>
        </classpath>
    </typedef>

    <property file="${basedir}/properties/${env}/deploy.properties"/>
    <property file="${basedir}/properties/${env}/ivr.properties"/>

    <!-- *********************** DOWNLOAD ARTIFACTS************************* -->
    <target name="download.tama.from.hudson">
        <echo message="Downloading TAMA from http://${hudson.server}:${hudson.port}/job/${hudson.job.name}/${hudson.build.number}/org.motechproject.tama$tama/artifact/org.motechproject.tama/tama/${hudson.release.version}/tama-${hudson.release.version}.war"/>
        <exec executable="bash" failonerror="true">
            <arg file="${basedir}/scripts/download_artifact.sh"/>
            <arg value="http://${hudson.server}:${hudson.port}/j_acegi_security_check"/>
            <arg value="http://${hudson.server}:${hudson.port}/job/${hudson.job.name}/${hudson.build.number}/${hudson.artifact.path}/artifact/org.motechproject.tama/tama/${hudson.release.version}/tama-${hudson.release.version}.war"/>
            <arg value="${download.dir}/${app.name}.war"/>
            <arg value="${hudson.username}"/>
            <arg value="${hudson.password}"/>
        </exec>
        <echo message="downloaded tama-${hudson.release.version}.war from hudson"/>
    </target>

    <target name="copy.tama.to.tomcat">
        <copy.app.war.to.tomcat tomcat.home="${tomcat.home}" app.name="${app.name}" download.dir="${download.dir}"/>
    </target>

    <target name="copy.local.war">
        <echo message="Deploying to tomcat at ${tomcat.url} with tomcat home ${tomcat.home}"/>
        <delete dir="${tomcat.home}/webapps/${app.name}"/>
        <copy file="${download.dir}/${local.war.file}" tofile="${tomcat.home}/webapps/${app.name}.war"
              overwrite="true"/>
        <delete dir="${tomcat.home}/work/Catalina/localhost/${app.name}"/>
    </target>

    <target name="start.tomcat" description="start tomcat">
        <echo message="Starting tomcat..."/>
        <echo message="Waiting for tomcat to start with tomcat home at ${tomcat.home}"/>
        <exec executable="/sbin/service" dir="${tomcat.home}">
            <arg line="tomcat start"/>
        </exec>
        <waitfor checkevery="100" checkeveryunit="millisecond" maxwait="2" maxwaitunit="minute" timeoutproperty="tomcat.timeout">
            <http url="http://localhost:${tomcat.port}"/>
        </waitfor>
        <fail if="tomcat.timeout" message="Error starting up tomcat..."/>
        <echo message="Tomcat started"/>
    </target>

    <target name="stop.tomcat" description="stop tomcat">
        <echo message="Stopping tomcat..."/>
        <echo message="Waiting for tomcat to stop with tomcat home at ${tomcat.home}"/>
        <exec executable="/sbin/service" dir="${tomcat.home}">
            <arg line="tomcat stop"/>
        </exec>
        <waitfor checkevery="100" checkeveryunit="millisecond" maxwait="2" maxwaitunit="minute" timeoutproperty="tomcat.timeout">
            <not>
                <http url="http://localhost:${tomcat.port}"/>
            </not>
        </waitfor>
        <fail if="tomcat.timeout" message="Error shutting down tomcat..."/>
        <echo message="Tomcat stopped"/>
    </target>

    <target name="restart.tomcat" description="restart tomcat">
        <antcall target="stop.tomcat" />
        <antcall target="start.tomcat" />
    </target>

    <path id="lib.path">
        <fileset dir="${tomcat.home}/webapps/${app.name}/WEB-INF/lib" includes="**/*.jar"/>
    </path>

    <target name="load.seed.data">
        <load.seed.data tomcat.home="${tomcat.home}" app.name="${app.name}"
                        couchdb.seed.main.class="${couchdb.seed.main.class}" db.name="${couchdb.tama.db.name}"/>
    </target>

    <target name="cache.audio.files.in.kookoo">
        <echo message="Caching audio files.."/>
        <java fork="false" classname="${cache.audio.files.main.class}">
            <classpath>
                <path location="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"/>
                <path refid="lib.path"/>
            </classpath>
            <arg value="${kookoo.api.key}"/>
            <arg value="${content.location.url}"/>
        </java>
        <echo message="Done caching audio files"/>
    </target>

    <target name="drop.couch.db">
        <drop.couch.db couch.db.server="${couchdb.server}" couch.db.port="${couchdb.port}" db.name="${dbname}"/>
    </target>

    <target name="drop.all.dbs">
        <foreach list="${couchdb.all.dbs}" target="drop.couch.db" param="dbname"/>
    </target>

    <!-- *************************RECREATE MYSQL************************* -->
    <target name="load.quartz.schema">
        <path id="dependencies">
            <fileset file="./lib/mysql-connector-java-5.1.13.jar"/>
        </path>
        <sql driver="${mysql.driver}"
             url="jdbc:mysql://${mysql.server}:${mysql.port}/${mysql.db.name}?autoReconnect=true"
             userid="${mysql.user}"
             classpathref="dependencies"
             password="${mysql.password}">
            drop database ${mysql.db.name};
            create database ${mysql.db.name};
        </sql>
        <sql driver="${mysql.driver}"
             url="jdbc:mysql://${mysql.server}:${mysql.port}/${mysql.db.name}?autoReconnect=true"
             userid="${mysql.user}"
             classpathref="dependencies"
             password="${mysql.password}"
             src="./sql/tables_mysql_innodb.sql">
        </sql>
        <echo message="recreated schema for ${mysql.db.name}"/>
    </target>

    <!-- *************************SET PROPERTIES************************* -->
    <target name="set.properties">
        <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
              file="${basedir}/properties/${env}/quartz.properties"/>
        <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
              file="${basedir}/properties/${env}/couchdb.properties"/>
        <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
              file="${basedir}/properties/${env}/seed.properties"/>
        <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
              file="${basedir}/properties/${env}/activemq.properties"/>
        <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
              file="${basedir}/properties/${env}/ivr.properties"/>
        <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
              file="${basedir}/properties/${env}/dailypillreminder.properties"/>
        <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
              file="${basedir}/properties/${env}/fourdayrecall.properties"/>
        <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
              file="${basedir}/properties/${env}/healthtips.properties"/>
        <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
              file="${basedir}/properties/${env}/timeSlot.properties"/>
        <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
              file="${basedir}/properties/${env}/appointments.properties"/>
        <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
              file="${basedir}/properties/${env}/log4j.xml"/>
		<copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
			  file="${basedir}/properties/${env}/sms-http-template.json"/>
		<copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
				  file="${basedir}/properties/${env}/tama.properties"/>
		<copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
				  file="${basedir}/properties/${env}/clinicianSMS.properties"/>
        <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
              file="${basedir}/properties/${env}/tamaReports.properties"/>
		<antcall target="unwire.motech.delivery.tools"/>
    </target>

    <target name="unwire.motech.delivery.tools">
        <if>
            <equals arg1="${with.tools}" arg2="true" />
            <then>
                <echo message="TAMA tools installed." />
            </then>
            <else>
                <echo message="Removing TAMA tools." />
                <delete failonerror="false">
                    <fileset dir="${tomcat.home}/webapps/${app.name}/WEB-INF/lib"
                             includes="motech-job-handler-invoker*"/>
                    <fileset dir="${tomcat.home}/webapps/${app.name}/WEB-INF/lib"
                             includes="motech-datetime-simulator*"/>
                </delete>
                <copy overwrite="true" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/classes"
                      file="${basedir}/properties/${env}/placeholderPluginContext.xml"/>
            </else>
        </if>
        <if>
            <equals arg1="${env}" arg2="prod" />
	    <then>
                <echo message="Removing emulator." />
                <delete failonerror="false" includeemptydirs="true">
                    <fileset dir="${tomcat.home}/webapps/${app.name}" includes="emulator/**" defaultexcludes="false"/>
                </delete>
            </then>
            <else>
                <echo message="Emulator installed." />
            </else>
        </if>
    </target>

    <!-- *************************DEPLOY TARGETS************************* -->
    <target name="deploy.tama.from.hudson.and.reset.db"
            depends="stop.tomcat, drop.all.dbs, load.quartz.schema, download.tama.from.hudson, copy.tama.to.tomcat, start.tomcat, set.properties, load.seed.data, restart.tomcat"
            description="Deploy TAMA by 1) fetching artifact from hudson, 2) recreate tama-web couchdb database with seed data 3) clearing quartz mysql jobdatastore 4) set properties for war"/>

    <target name="deploy.tama.from.hudson"
            depends="stop.tomcat, download.tama.from.hudson, copy.tama.to.tomcat, start.tomcat, set.properties, restart.tomcat"
            description="Deploy TAMA from hudson without recreating database and seed data"/>

    <target name="deploy.tama.from.local.and.reset.db"
            depends="stop.tomcat, drop.all.dbs, load.quartz.schema, copy.local.war, start.tomcat, set.properties, load.seed.data, restart.tomcat"
            description="Deploy TAMA from locally downloaded war(set 'local.war.file' in deploy.properties) in artifacts folder. Also recreates the TAMA database."/>

    <target name="deploy.tama.from.local"
            depends="stop.tomcat, copy.local.war, start.tomcat, set.properties, restart.tomcat"
            description="Deploy TAMA from locally downloaded war(set 'local.war.file' in deploy.properties) in artifacts folder without recreating database and seed data"/>

</project>
